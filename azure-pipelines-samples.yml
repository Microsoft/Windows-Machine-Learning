resources:

- repo: self
  clean: true

variables:

  SamplesBin: SamplesBin
  system.debug: false
  WINDOWS_WINMD: C:\Program Files (x86)\Windows Kits\10\UnionMetadata\10.0.17763.0\Windows.winmd

strategy:
  maxParallel: 8
  matrix:
    Release_x64:
      BuildPlatform: x64
      BuildConfiguration: Release
    Debug_x64:
      BuildPlatform: x64
      BuildConfiguration: Debug
    Release_x86:
      BuildPlatform: x86
      BuildConfiguration: Release
    Debug_x86:
      BuildPlatform: x86
      BuildConfiguration: Debug

# CI trigger
trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - Tools

# PR validation trigger
pr:
  branches:
    include:
    - master
  paths:
    exclude:
    - Tools

steps: 
  - task: PowerShell@2
    displayName: 'Check SDK Version 17763 is present'
    inputs:
      targetType: inline
      script: dir "${ENV:programfiles(x86)}\windows Kits\10\include\10.0.17763.0\"
    
  - task: DotNetCoreInstaller@0
    displayName: 'Use .NET Core sdk 2.1.300'
    inputs:
      version: 2.1.300
    condition: succeededOrFailed()

  - task: NuGetToolInstaller@0
    displayName: 'Use NuGet 4.9.2'
    inputs:
      versionSpec: 4.9.2
    condition: succeededOrFailed()

  - task: NuGetCommand@2
    displayName: 'NuGet restore samples dependencies'
    inputs:
      restoreSolution: winml/samples/public/WinMLGithub/Samples/**/*.sln
    condition: succeededOrFailed()

  - task: NuGetCommand@2
    displayName: 'NuGet restore test dependencies'
    inputs:
      restoreSolution: winml/samples/public/WinMLGithub/Testing/**/SamplesTest.sln
    condition: succeededOrFailed()

  - task: VSBuild@1
    displayName: 'Build UI test solution winml/samples/public/WinMLGithub/Testing/**/SamplesTest.sln'
    inputs:
      solution: 'Testing/**/SamplesTest.sln'
      vsVersion: 15.0
      msbuildArgs: '/p:AppxPackageSigningEnabled=false -v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\SamplesTest\'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()

  - task: VSBuild@1
    displayName: 'Build AdapterSelection Sample '
    inputs:
      solution: Samples/AdapterSelection/AdapterSelection.sln
      vsVersion: 15.0
      msbuildArgs: '/p:AppxPackageSigningEnabled=false -v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\AdapterSelection\'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()

  - task: VSBuild@1
    displayName: 'Build CustomOperatorCPU Sample '
    inputs:
      solution: Samples/CustomOperatorCPU/desktop/cpp/custom-operator-cpu-sample.sln
      vsVersion: 15.0
      msbuildArgs: '/p:AppxPackageSigningEnabled=false -v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\CustomOperatorCPU\'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()


  - task: VSBuild@1
    displayName: 'Build MNIST-Tutorial-cs'
    inputs:
      solution: 'Samples/MNIST/Tutorial/cs/mnist_demo.sln'
      vsVersion: 15.0
      msbuildArgs: '/p:AppxPackageSigningEnabled=false -v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\MNIST-Tutorial\'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()

  - task: VSBuild@1
    displayName: 'Build MNIST-UWP-cs'
    inputs:
      solution: 'Samples/MNIST/UWP/cs/mnist_demo.sln'
      vsVersion: 15.0
      msbuildArgs: '/p:AppxPackageSigningEnabled=false -v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\MNIST-cs\'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()

  - task: VSBuild@1
    displayName: 'Build SqueezenetObjectDetection'
    inputs:
      solution: Samples/SqueezeNetObjectDetection/squeezenetobjectdetection.sln
      vsVersion: 15.0
      msbuildArgs: '/p:AppxPackageSigningEnabled=false -v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\SqueezeNetObjectDetection\'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()

  - task: VSBuild@1
    displayName: 'Build FNSCandyStyleTransfer-UWP-CS'
    inputs:
      solution: Samples/FNSCandyStyleTransfer/UWP/CS/snapcandy.sln
      vsVersion: 15.0
      msbuildArgs: '/p:AppxPackageSigningEnabled=false -v:diag  /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\FNSCandyStyleTransfer\'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()

  - task: VSBuild@1
    displayName: 'Build MNIST-UWP-cppcx '
    inputs:
      solution: 'Samples/MNIST/UWP/cppcx/mnist_cppcx.sln'
      vsVersion: 15.0
      msbuildArgs: '/p:AppxPackageSigningEnabled=false -v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\MNIST-cppcx\'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()

  - task: VSBuild@1
    displayName: 'Build CustomTensorization Sample'
    inputs:
      solution: Samples/CustomTensorization/CustomTensorization.sln
      vsVersion: 15.0
      msbuildArgs: '/p:AppxPackageSigningEnabled=false -v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\CustomTensorization\'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()

  - task: VSBuild@1
    displayName: 'Build Emoji Sample'
    inputs:
      solution: Samples/Emoji8/UWP/cs/Emoji8.sln
      vsVersion: 15.0
      msbuildArgs: '/p:AppxPackageSigningEnabled=false -v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\Emoji8\'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()

  - task: CopyFiles@2
    inputs:
      targetFolder: '$(Build.ArtifactStagingDirectory)\$(BuildPlatform)\$(BuildConfiguration)\'
      sourceFolder: '$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\'
    condition: succeededOrFailed()

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Samples'
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: WinMLPublicSamples
    condition: succeededOrFailed()
